# -*- coding: utf-8 -*-
"""ManipulaçãoDeDadosEmPython.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FxEd1ye9IIHEXgIbG3YdcOj5eqUceR2R

Manipulação de Dados com python - Part01

##### Lendo arquivos em python
"""

# Abrindo um arquivo para leitura
arquivo = open('/content/A DataScience Academy fornece curso.text','r') #r => read
type(arquivo)

base_dados = open('/content/200201.CSV','r')
type(base_dados)

# Lendo o arquivo
print(arquivo.read())

print(base_dados.read())

# Contar o numero de caracteres
print(arquivo.tell())

print(base_dados.tell())

# Retornar para o inicio do texto
# Isso sera necessario quando iniciarmos o arquivo de texto mais de uma vez.
print(arquivo.seek(0,0))

# Lendo um numero especifico de caracteres:
print(arquivo.read(10)) #10 Os 1o primeiros caracteres.

"""#### Gravando arquivos"""

# Abrindo arquicos paa gravação
arquivo = open('/content/A DataScience Academy fornece curso.text','w') # w => no modo escrita.

# Como abrimos o arquico apenas para gravação, não podemos usar comandos de leitura.
print(arquivo.read())

# Gravando ou escrevendo um arquivo:
arquivo.write('Estou manipulando um arquivo em python.')

# Fechando o arquivo apos grava-lo ou manipula-lo
arquivo.close()

# Lendo um arquivo gravado
arquivo = open('/content/A DataScience Academy fornece curso.text','r')
print(arquivo.read())

# Acrecentando conteudo ou texto em um arquivo.
arquivo = open('/content/A DataScience Academy fornece curso.text','a') # a => append =>  adiciona algo no arquivo ja existente sem apagar.
arquivo.write('por isso manipulei o arquivo mais uma vez. ')
arquivo.close()

arquivo = open('/content/A DataScience Academy fornece curso.text','r')
print(arquivo.read())

"""#### Abrindo um dataset em uma linha

####  Declarei a abertura do arquivo csv com o  'r' simbolizando que queremos ler o arquivo.
"""

r = open ('arquivos/salarios.csv','r')

# Vai ser a função read que vai retornar visivelmente os valores da tabela.
data = f.read()

read_data = read_data.read()

#Neste comando ele vai realizar o separamento de linha por linha.
rows = data.split('\n')

linhas = read_data.split('\n')
print(linhas)

# Vamos fazer uma lista vazia onde vamos armazenar as informaçãoes
full_data = []

#For em linhas
for row in rows:
  split_row = (row.split(','))
  full_data.append(split_row)

"""### Contando as linhas de um arquivo"""

arquivo = open('arquivos/salarios.csv','r')

dados = f.read()

linhas = dados.split('\n')

lista_dados = []

for linha in linhas:
  split_linha = linha.split(',')
  lista_dados.append(split_linha)

open_file = open('/content/200201.CSV','r')
dados = open_file.read()

rows = dados.split('\n')
print(rows)

full_data = []

for row in rows:
  split_row = row.split(',')
  full_data.append(split_row)
  print(split_row)

# contando o numero de linhas em um arquivo
count = 0
for row in full_data:
  count += 1
print(f'Numero de linhas no arquivo: {count} linhas.')

"""### Contando o numero de colunas de um arquivo"""

for row in rows:
  # Ele vai separar as linhas
  split_row = row.split(',')
  # Ele vai adicionar as linhas separadas em nossa lista full_data
  full_data.append(split_row)
  # Ele vai pegar a primeira linha da lista
  first_row = full_data[0]

count = 0

for column in first_row:
  count += 1
print(f'Numero de colunas no arquivo: {count} colunas.')

"""Gravando Arquivo pelo jupyter"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile / text.txt
# Este arquivo foi criado pelo jupyter notebook.

#Comando utilizado para ler linha por linha em nosso arquivo de texto.
text.readlines()

# Podemos usar um loop para poder
for line in open('/content/text.txt'):
  print(line)

"""### Importando um dataset com pandas"""

import pandas as pd
pd.__version__

arquivo = '/content/200201.CSV'
df = pd.read_csv(arquivo)
df.head()

"""## Manipulação de arquivos em TXT

* TXT é a extensão de arquivos de texto puro. Um arquivo TXT é um arquivo de texto simples sem formatação, como negrito, italico ou fontes diferentes. Ele pode ser aberto e editado com muitos aplicativos diferentes, incluindo editores de texto, processadores de textos e IDES. Arquivos TXT são amplamente utilizado spata armazenar dados de texto simples, com listas, notas e documentos de texto. Eles são universais e podem  ser lidos em praticamente qualquer dispositivo ou sistema operacional.
"""

texto = 'Cientista d dados pode ser uma exelente alternativa de carreira,\n'
texto = texto + 'Esses profissionais precisam saber como programar em Python. \n'
texto += 'E, claro, que devem ser proficiente em Data Science. \n'

print(texto)

#importando modulos os (operate system)
import os

# criando um arquivo
arquivo = open('/content/arquivo.txt','w')

# Gravando os dados em um arquivo
for palavra in texto.split('\n'):
  arquivo.write(palavra + 'Eu estou manipulando um arquivo...')

# Fechando o arquivo
arquivo.close()

arquivo = open('/content/arquivo.txt','r')
lendo_arquivo = arquivo.read()
arquivo.close()
print(lendo_arquivo)

"""## Manipulando arquivos TXT em python com o Pacote OS

O método close() é execultado automaticamente.
"""

#Com o arquivo aberto em .... chame o arquivo:
with open('/content/sample_data/mnist_test.csv','r') as arquivo:
  conteudo = arquivo.read()
  print(conteudo)

print(len(conteudo))

# o exemplo abaixo ele ja com o comando with, ele execultada as linha e ja fecha o arquivo automaticamente.
with open('/content/sample_data/mnist_test.csv','w') as arquivo:
  arquivo.write(texto[:19])
  arquivo.write('\n')
  arquivo.write(texto[18:66])

# Lendo um arquivo
arquivo = open('/content/sample_data/mnist_test.csv','r')
conteudo = arquivo.read()
arquivo.close()
print(conteudo)

"""## Manipulando arquivos CSV

CSV (Comma-Separeted-Values) é um formato de arquivo que armazena dados tabulares em formato de texto plano. Cada linha do arquivo CSV representa uma linha da tabela e as colunas são separadas por virgulas. É amplamente utilizado para exportar e importar em diferentes aplicações, como planilhas e banco de dados. CSV é uma opção simples e universão para compartilhar dados, pois pode ser aberto e editado com muitos aplicativos diferentes, incluindo programas de planilhas e editores de texto.
"""

# Importando o módulo cvs
import csv

# Fazendo a leitura de m arquivo CVS
with open('/content/sample_data/numeros.csv','r',newline='\r\n',encoding='utf8') as documento:
  reader = csv.reader(documento)
  for row in reader:
    print(row)

"""## Manipulando Arquivos JSON(Java Script Object Notation)

JSON (JavaScript Object Notation) é um formatao de dados de texto simples e leve que é utilizado para transferir informações em aplicações web. É baseado em uma estrutura de objetos JavaScript e usa pares de chave-valor para representar dados. JSON é facil lido e escrito por maquinas e é amplamente utilizado como formato de intercambio de dados em aplicações web modernas.
"""

# criando um dicionario
dict_guido = {
    'nome':'Guido van Rossum',
    'linguagem':'Python',
    'Anos de experiencia':10
    }

for k,v in dict_guido.items():
  print(k,v)

#Este tipo de for vai nos trazer a chave e valor das propriedades percorridas.
for key, value in dict_guido.items():
  print(key,value)

import json

# o atributo dumps converte um arquivo de dicionario , para um arquivo em JSON.
json.dumps(dict_guido)

# Abar o arquivo ... como arquivo_json e adicione o nome dados_json convertendo com json.dumps o arquivo ...
with open('/content/sample_data/dados.json','w') as arquivo_json:
  dados_json = json.dump(dict_guido,arquivo_json)

with open('/content/sample_data/dados.json','r') as arquivo:
  texto = arquivo.read()
  print(texto)
  dados = json.loads(texto)
  print(type(dados))
  print(dados['nome'])

"""## Extração de Arquivos da Web"""

# imprimindo um arquivo JSON copiado da internet
from urllib.request import urlopen

response = urlopen("https://vimeo.com/api/v2/video/57733101.json").read().decode('utf-8')
# 0 indica que queremos somente a primeira parte do conteudo:
video = json.loads(response)[0]
print(video)

print('Id: ',video['id'])
print('Titulo: ',video['title'])
print('Descrição: ', video['description'])
print('Duração: ', video['duration'])
print('Thumbnail_video: ', video['thumbnail_large'])

"""## Copiando o conteudo de um arquivo para outro"""

# nome dos arquivos
arquivo_fonte = '/content/sample_data/dados.json'
arquivo_destino = '/content/sample_data'

# Metodo 1
with open('arquivo_fonte','r') as infile:
  text = infile.read()
  with open(arquivo_destino,'w') as outfile:
    outfile.write(text)

# metodo 2
open(arquivo_destino,'w').write(open(arquivo_fonte,'r').read())

# Leitura do arquivo txt
with open('arquivos/dados.txt','r') as arquivo:
  texto = arquivo.read()
  print(texto)

"""# Pacote e Módulos

Em Pyhon, um modulo é um arquivo (script) que contém código Python e pode ser importado em outros arquivos Python. Ele é usado para compartilhar funções, classes e variaveis ntre arquivos.

Já um pocote é um coleção de módulos organizados em uma estrutura de diretorios. Ele permite a divisão de um aplicativo em multiplos módulos, o que facilita manutenção e o desenvolvimento.

Visite o PyPi, repositorio de pacotes da liguagem Python:
https://pypi.org/
"""

#Importando um pacote
import numpy

# Verificando todos os métofos e atributos dispositivos no pacote
dir(numpy)

# Usando um dos métodos do pacotes Numpy
numpy.sqrt(25)

# Importando apenas um método do pacote Numpy
from numpy import sqrt

sqrt(9)

"""## Funções Built-in em Python

### Função Map

A função map() em paython é uma função que aplica uma determinada função a cada elemento de uma estrutura de dados iteravél( como uma lista, tupla ou outro objeto interavél). A função map() retorna um objeto que pode ser convertido em outra estrutura de dados, como uma lista, se necessario.
"""

# Funcção python que retorna um numero ao quadrado
def potencia(x):
  return x**2

numeros = [1,2,3,4,5]

numero_ao_quadrado = list(map(potencia,numeros))
print(numero_ao_quadrado)

# Criando duas funções

# Função1 - Recebe uma temperatura como parametro e retona a temperatura em Farenheit
def farenheit(T):
  return ((float(9)/5)*T + 32)

# Função 2 - Recebe uma temperatura como parametro e retorna a temperatura em Celsius
def celsius(T):
  return (float(5)/9)*(T-32)

# Criando uma lista
temperaturas = [0,22.5,40,100]

# Aplicando a função a cada elemento da lista de temperaturas.
# Em python 3, a função map() retorna o interator
map(farenheit, temperaturas)

#Função map() retornando a lista de temperaturas convertidas em farenheit
list(map(farenheit, temperaturas))

# Usando um loop for para imprimir o resultado da função map():
for temp in map(farenheit, temperaturas):
  print(temp)

# Convertendo para Celsius
map(farenheit, temperaturas)

list(map(celsius, temperaturas))

# Usando expressões lambda
map(lambda x: (5.0/9)*(x - 32), temperaturas)

list(map(lambda x: (5.0/9)*(x - 32), temperaturas))

# Somando os elementos de 2 lista
a = [1,2,3,4]
b = [5,6,7,8]

def soma(x,y):
  return x+y

def lista_um():
  for i in a: print(i)

def lista_dois():
  for j in b:
    print(j)

def soma_as_duas_listas():
  for k in list(map(soma,a,b)):
    print(k)

lista_um()
lista_dois()
soma_as_duas_listas()

map(soma, a, b)

list(map(soma, a, b))

"""# Conversor de Dolar para o real"""

# 1 passo: temos que descobrir algo que nos ajude a converter o real para dolar
# 2 passo: temos que ter uma entrada para o usuario do valor que ele quer converter.
# 3 passo: podemos deixar um painel para o usuario com a informado do dolar em tempo real.

import requests
url = 'https://economia.awesomeapi.com.br/json/last/USD-BRL'
response = requests.get(url)
print(url)

def entrada_em_real():
  valor_real = float(input('Digite o valor em real: '))
  return valor_real

def valor_dolar():
  #Valor total da cotação do dolar no dia atual:
  valor_dolar = float(dados['USDBRL']['bid'])
  return valor_dolar

def hora_da_conversao():
  data_e_hora_da_cotaçao = str(dados['USDBRL']['create_date'])
  return data_e_hora_da_cotaçao

hora_da_conversao()

def conversao_real_para_dolar():
  # Entrada em real
  real = entrada_em_real()
  # Valor do dolar
  dolar = valor_dolar()
  # Conversão
  conversao_real_para_dolar = dolar * real
  print(f'O valor do dolar: {dolar:,.2f}')
  print(f'O valor convertido de dolar para o real é R$:{conversao_real_para_dolar:,.2f}')
  print(f'Data da conversão: {hora_da_conversao()}')

def main():
  conversao_real_para_dolar()
main()

"""## Função Reduce

A função reduce() em Python é uma função da biblioteca functools que aplica uma determina função binaria a pares consecultivos de elementos em uma estrutura de dados iteravel (como uma lista, tupla ou outro objeto iteravel), reduzindo a um unico valor.
"""

# Importando a função reduce do modulo functools
from functools import reduce

lista = [47,11,42,13]

#Função soma:
def soma(x,y):
  return x+y

reduce(soma, lista)

# Usando  a função reduce() com lambda
reduce(lambda x,y: x+y, lista)

# Podemos atribuir a expressão lambda a uma variavel
max_find2 = lambda x,y: x if (x > y) else y

type(max_find2)

# Reduzindo a lista até o valor maximo, através da função criada com a expressão lambda
reduce(max_find2, lista)

"""## Função filter

A função filter() em python é uma função que filtra elementos de estrutura de dados iteravél(como uma lista, tupla ou outro objeto iteravel) com base em uma determinada condição. A função filter() retorna um objeto filtrado, que pode ser convertido em outra estrutura de dados, como uma lista, se necessario.
"""

#Criando um função para verificar se o numero é par:
def verificaPar(num):
  if num % 2 == 0:
    return True
  else:
    return False

def verificaImpar(num):
  if num % 2 != 0:
    return True
  else:
    return False

#Chamando a função e passando um numero como parametro. Retonara Falso se for impar e sor true par.
verificaPar(2)
verificaPar(3)

lista = [0,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18]

lista

filter(verificaPar, lista)

list(filter(verificaPar, lista))

list(filter(verificaImpar, lista))

list(filter(lambda x: (x % 2 == 0), lista))

list(filter(lambda x: (x % 2 != 0), lista))

"""# Função Zip

A função zip() em python é um função que agrupa elementos de múltiplas estruturas de dados iteraveis(como listas, tuplas ou outros objetos iteraveis), juntos em pares. A função zip()
 retonar um objeto zip, que pode ser convertido em outra estrutura de dados, como uma lista ou dicionario, se necessario.
"""

#criando duas lista
x = [1,2,3]
y = [4,5,6]

# Unindo as listas. Em python3 retorna um iterator
zip(x,y)

# Perceba que zip retona tuplas. Nest caso, uma lista de tuplas
list(zip(x,y))

# Criando 2 dicionarios
d1 = {'a':1,'b':2}
d2 = {'c':4,'d':5}

# Vai unir as chaves
list(zip(d1,d2))

# Se quisermos os valores vamos ter que chamar a propriedade values()
list(zip(d1,d2.values()))

# Criando uma função para trocar valores entre 2 dicionarios
def trocaValores(d1, d2):
  dicTemp = {}

  for d1key, d2val in zip(d1, d2.values()):
    dicTemp[d1key] = d2val

  return dicTemp

trocaValores(d1,d2)

"""## Função enumerate

A função enumerate() em python é uma função que permite iterar uma estrutura de dados (como uma lista, tupla ou outro bjeto iteravél). A função enumerate() retorna um objeto enumerado, que pode ser usado em loops para percorrer as estruturas de dados e acessar o contador e o valor de cada elemento.
"""

# Criando uma lista
seq = ['a','b','c']

enumerate(seq)

list(enumerate(seq))

# Imprimindo os valores de um alista com a função enumerate() e seus respectivos indices.
for indice, valor in enumerate(seq):
  print(indice, valor)

for indice, valor in enumerate(seq):
  if indice >=2:
    break
  else:
    print(valor)

lista = ['Marketing','Tecnologia','Business']

for i, item in enumerate(lista):
  print(i, item)

for i, item in enumerate('Data Science Academy'):
  print(i, item)

for i, item in enumerate(range(10)):
  print(i, item)